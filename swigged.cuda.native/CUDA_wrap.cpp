/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Cuda(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Cuda(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Cuda(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "cuda.h"

 
	CUresult CUDAAPI cuDeviceGetName(char *name, int len, CUdevice dev);
	
 
	CUresult CUDAAPI cuDeviceGetPCIBusId(char *name, int len, CUdevice dev);


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetName_private___(char * jarg1, int jarg2, int jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  CUdevice arg3 ;
  CUresult result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CUdevice)jarg3; 
  result = (CUresult)cuDeviceGetName(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetPCIBusId_private___(char * jarg1, int jarg2, int jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  CUdevice arg3 ;
  CUresult result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CUdevice)jarg3; 
  result = (CUresult)cuDeviceGetPCIBusId(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda___CUDA_API_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)(8000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)(8000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_IPC_HANDLE_SIZE_get___() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_MEMHOSTALLOC_PORTABLE_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_MEMHOSTALLOC_DEVICEMAP_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_MEMHOSTALLOC_WRITECOMBINED_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x04);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_MEMHOSTREGISTER_PORTABLE_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_MEMHOSTREGISTER_DEVICEMAP_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_MEMHOSTREGISTER_IOMEMORY_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x04);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_ARRAY3D_LAYERED_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_ARRAY3D_2DARRAY_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_ARRAY3D_SURFACE_LDST_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_ARRAY3D_CUBEMAP_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x04);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_ARRAY3D_TEXTURE_GATHER_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x08);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CUDA_ARRAY3D_DEPTH_TEXTURE_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_TRSA_OVERRIDE_FORMAT_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_TRSF_READ_AS_INTEGER_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_TRSF_NORMALIZED_COORDINATES_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_TRSF_SRGB_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_CU_PARAM_TR_DEFAULT_get___() {
  int jresult ;
  int result;
  
  result = (int)(-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuGetErrorString___(int jarg1, void * jarg2) {
  int jresult ;
  CUresult arg1 ;
  char **arg2 = (char **) 0 ;
  CUresult result;
  
  arg1 = (CUresult)jarg1; 
  arg2 = (char **)jarg2; 
  result = (CUresult)cuGetErrorString(arg1,(char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuGetErrorName___(int jarg1, void * jarg2) {
  int jresult ;
  CUresult arg1 ;
  char **arg2 = (char **) 0 ;
  CUresult result;
  
  arg1 = (CUresult)jarg1; 
  arg2 = (char **)jarg2; 
  result = (CUresult)cuGetErrorName(arg1,(char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuInit___(unsigned int jarg1) {
  int jresult ;
  unsigned int arg1 ;
  CUresult result;
  
  arg1 = (unsigned int)jarg1; 
  result = (CUresult)cuInit(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDriverGetVersion___(void * jarg1) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  result = (CUresult)cuDriverGetVersion(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGet___(void * jarg1, int jarg2) {
  int jresult ;
  CUdevice *arg1 = (CUdevice *) 0 ;
  int arg2 ;
  CUresult result;
  
  arg1 = (CUdevice *)jarg1; 
  arg2 = (int)jarg2; 
  result = (CUresult)cuDeviceGet(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetCount___(void * jarg1) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  result = (CUresult)cuDeviceGetCount(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceTotalMem_v2___(void * jarg1, int jarg2) {
  int jresult ;
  size_t *arg1 = (size_t *) 0 ;
  CUdevice arg2 ;
  CUresult result;
  
  arg1 = (size_t *)jarg1; 
  arg2 = (CUdevice)jarg2; 
  result = (CUresult)cuDeviceTotalMem_v2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetAttribute___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUdevice_attribute arg2 ;
  CUdevice arg3 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (CUdevice_attribute)jarg2; 
  arg3 = (CUdevice)jarg3; 
  result = (CUresult)cuDeviceGetAttribute(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetProperties___(void * jarg1, int jarg2) {
  int jresult ;
  CUdevprop *arg1 = (CUdevprop *) 0 ;
  CUdevice arg2 ;
  CUresult result;
  
  arg1 = (CUdevprop *)jarg1; 
  arg2 = (CUdevice)jarg2; 
  result = (CUresult)cuDeviceGetProperties(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceComputeCapability___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  CUdevice arg3 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (CUdevice)jarg3; 
  result = (CUresult)cuDeviceComputeCapability(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDevicePrimaryCtxRetain___(void * jarg1, int jarg2) {
  int jresult ;
  CUcontext *arg1 = (CUcontext *) 0 ;
  CUdevice arg2 ;
  CUresult result;
  
  arg1 = (CUcontext *)jarg1; 
  arg2 = (CUdevice)jarg2; 
  result = (CUresult)cuDevicePrimaryCtxRetain(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDevicePrimaryCtxRelease___(int jarg1) {
  int jresult ;
  CUdevice arg1 ;
  CUresult result;
  
  arg1 = (CUdevice)jarg1; 
  result = (CUresult)cuDevicePrimaryCtxRelease(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDevicePrimaryCtxSetFlags___(int jarg1, unsigned int jarg2) {
  int jresult ;
  CUdevice arg1 ;
  unsigned int arg2 ;
  CUresult result;
  
  arg1 = (CUdevice)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CUresult)cuDevicePrimaryCtxSetFlags(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDevicePrimaryCtxGetState___(int jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CUdevice arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  int *arg3 = (int *) 0 ;
  CUresult result;
  
  arg1 = (CUdevice)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (CUresult)cuDevicePrimaryCtxGetState(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDevicePrimaryCtxReset___(int jarg1) {
  int jresult ;
  CUdevice arg1 ;
  CUresult result;
  
  arg1 = (CUdevice)jarg1; 
  result = (CUresult)cuDevicePrimaryCtxReset(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxCreate_v2___(void * jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  CUcontext *arg1 = (CUcontext *) 0 ;
  unsigned int arg2 ;
  CUdevice arg3 ;
  CUresult result;
  
  arg1 = (CUcontext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (CUdevice)jarg3; 
  result = (CUresult)cuCtxCreate_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxDestroy_v2___(void * jarg1) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  result = (CUresult)cuCtxDestroy_v2(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxPushCurrent_v2___(void * jarg1) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  result = (CUresult)cuCtxPushCurrent_v2(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxPopCurrent_v2___(void * jarg1) {
  int jresult ;
  CUcontext *arg1 = (CUcontext *) 0 ;
  CUresult result;
  
  arg1 = (CUcontext *)jarg1; 
  result = (CUresult)cuCtxPopCurrent_v2(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxSetCurrent___(void * jarg1) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  result = (CUresult)cuCtxSetCurrent(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetCurrent___(void * jarg1) {
  int jresult ;
  CUcontext *arg1 = (CUcontext *) 0 ;
  CUresult result;
  
  arg1 = (CUcontext *)jarg1; 
  result = (CUresult)cuCtxGetCurrent(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetDevice___(void * jarg1) {
  int jresult ;
  CUdevice *arg1 = (CUdevice *) 0 ;
  CUresult result;
  
  arg1 = (CUdevice *)jarg1; 
  result = (CUresult)cuCtxGetDevice(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetFlags___(void * jarg1) {
  int jresult ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  CUresult result;
  
  arg1 = (unsigned int *)jarg1; 
  result = (CUresult)cuCtxGetFlags(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxSynchronize___() {
  int jresult ;
  CUresult result;
  
  result = (CUresult)cuCtxSynchronize();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxSetLimit___(int jarg1, unsigned long jarg2) {
  int jresult ;
  CUlimit arg1 ;
  size_t arg2 ;
  CUresult result;
  
  arg1 = (CUlimit)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (CUresult)cuCtxSetLimit(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetLimit___(void * jarg1, int jarg2) {
  int jresult ;
  size_t *arg1 = (size_t *) 0 ;
  CUlimit arg2 ;
  CUresult result;
  
  arg1 = (size_t *)jarg1; 
  arg2 = (CUlimit)jarg2; 
  result = (CUresult)cuCtxGetLimit(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetCacheConfig___(void * jarg1) {
  int jresult ;
  CUfunc_cache *arg1 = (CUfunc_cache *) 0 ;
  CUresult result;
  
  arg1 = (CUfunc_cache *)jarg1; 
  result = (CUresult)cuCtxGetCacheConfig(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxSetCacheConfig___(int jarg1) {
  int jresult ;
  CUfunc_cache arg1 ;
  CUresult result;
  
  arg1 = (CUfunc_cache)jarg1; 
  result = (CUresult)cuCtxSetCacheConfig(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetSharedMemConfig___(void * jarg1) {
  int jresult ;
  CUsharedconfig *arg1 = (CUsharedconfig *) 0 ;
  CUresult result;
  
  arg1 = (CUsharedconfig *)jarg1; 
  result = (CUresult)cuCtxGetSharedMemConfig(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxSetSharedMemConfig___(int jarg1) {
  int jresult ;
  CUsharedconfig arg1 ;
  CUresult result;
  
  arg1 = (CUsharedconfig)jarg1; 
  result = (CUresult)cuCtxSetSharedMemConfig(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetApiVersion___(void * jarg1, void * jarg2) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (CUresult)cuCtxGetApiVersion(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxGetStreamPriorityRange___(void * jarg1, void * jarg2) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (CUresult)cuCtxGetStreamPriorityRange(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxAttach___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  CUcontext *arg1 = (CUcontext *) 0 ;
  unsigned int arg2 ;
  CUresult result;
  
  arg1 = (CUcontext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CUresult)cuCtxAttach(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxDetach___(void * jarg1) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  result = (CUresult)cuCtxDetach(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuModuleLoad___(void * jarg1, char * jarg2) {
  int jresult ;
  CUmodule *arg1 = (CUmodule *) 0 ;
  char *arg2 = (char *) 0 ;
  CUresult result;
  
  arg1 = (CUmodule *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (CUresult)cuModuleLoad(arg1,(char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuModuleLoadData___(void * jarg1, void * jarg2) {
  int jresult ;
  CUmodule *arg1 = (CUmodule *) 0 ;
  void *arg2 = (void *) 0 ;
  CUresult result;
  
  arg1 = (CUmodule *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (CUresult)cuModuleLoadData(arg1,(void const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuModuleLoadFatBinary___(void * jarg1, void * jarg2) {
  int jresult ;
  CUmodule *arg1 = (CUmodule *) 0 ;
  void *arg2 = (void *) 0 ;
  CUresult result;
  
  arg1 = (CUmodule *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (CUresult)cuModuleLoadFatBinary(arg1,(void const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuModuleUnload___(void * jarg1) {
  int jresult ;
  CUmodule arg1 = (CUmodule) 0 ;
  CUresult result;
  
  arg1 = (CUmodule)jarg1; 
  result = (CUresult)cuModuleUnload(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuModuleGetFunction___(void * jarg1, void * jarg2, char * jarg3) {
  int jresult ;
  CUfunction *arg1 = (CUfunction *) 0 ;
  CUmodule arg2 = (CUmodule) 0 ;
  char *arg3 = (char *) 0 ;
  CUresult result;
  
  arg1 = (CUfunction *)jarg1; 
  arg2 = (CUmodule)jarg2; 
  arg3 = (char *)jarg3; 
  result = (CUresult)cuModuleGetFunction(arg1,arg2,(char const *)arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuModuleGetGlobal_v2___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  CUmodule arg3 = (CUmodule) 0 ;
  char *arg4 = (char *) 0 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  arg2 = (size_t *)jarg2; 
  arg3 = (CUmodule)jarg3; 
  arg4 = (char *)jarg4; 
  result = (CUresult)cuModuleGetGlobal_v2(arg1,arg2,arg3,(char const *)arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuLinkDestroy___(void * jarg1) {
  int jresult ;
  CUlinkState arg1 = (CUlinkState) 0 ;
  CUresult result;
  
  arg1 = (CUlinkState)jarg1; 
  result = (CUresult)cuLinkDestroy(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemGetInfo_v2___(void * jarg1, void * jarg2) {
  int jresult ;
  size_t *arg1 = (size_t *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  CUresult result;
  
  arg1 = (size_t *)jarg1; 
  arg2 = (size_t *)jarg2; 
  result = (CUresult)cuMemGetInfo_v2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemAlloc_v2___(void * jarg1, unsigned long jarg2) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  size_t arg2 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (CUresult)cuMemAlloc_v2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemAllocPitch_v2___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned int jarg5) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  unsigned int arg5 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  arg2 = (size_t *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (CUresult)cuMemAllocPitch_v2(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemFree_v2___(void * jarg1) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  result = (CUresult)cuMemFree_v2(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemGetAddressRange_v2___(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  CUdeviceptr arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  arg2 = (size_t *)jarg2; 
  arg3 = (CUdeviceptr)jarg3; 
  result = (CUresult)cuMemGetAddressRange_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemAllocHost_v2___(void * jarg1, unsigned long jarg2) {
  int jresult ;
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  CUresult result;
  
  arg1 = (void **)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (CUresult)cuMemAllocHost_v2(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemFreeHost___(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  result = (CUresult)cuMemFreeHost(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemHostAlloc___(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  int jresult ;
  void **arg1 = (void **) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  CUresult result;
  
  arg1 = (void **)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (CUresult)cuMemHostAlloc(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemHostGetDevicePointer_v2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (CUresult)cuMemHostGetDevicePointer_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemHostGetFlags___(void * jarg1, void * jarg2) {
  int jresult ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  void *arg2 = (void *) 0 ;
  CUresult result;
  
  arg1 = (unsigned int *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (CUresult)cuMemHostGetFlags(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemAllocManaged___(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (CUresult)cuMemAllocManaged(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetByPCIBusId___(void * jarg1, char * jarg2) {
  int jresult ;
  CUdevice *arg1 = (CUdevice *) 0 ;
  char *arg2 = (char *) 0 ;
  CUresult result;
  
  arg1 = (CUdevice *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (CUresult)cuDeviceGetByPCIBusId(arg1,(char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuIpcGetEventHandle___(void * jarg1, void * jarg2) {
  int jresult ;
  CUipcEventHandle *arg1 = (CUipcEventHandle *) 0 ;
  CUevent arg2 = (CUevent) 0 ;
  CUresult result;
  
  arg1 = (CUipcEventHandle *)jarg1; 
  arg2 = (CUevent)jarg2; 
  result = (CUresult)cuIpcGetEventHandle(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuIpcOpenEventHandle___(void * jarg1, void * jarg2) {
  int jresult ;
  CUevent *arg1 = (CUevent *) 0 ;
  CUipcEventHandle arg2 ;
  CUipcEventHandle *argp2 ;
  CUresult result;
  
  arg1 = (CUevent *)jarg1; 
  argp2 = (CUipcEventHandle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CUipcEventHandle", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (CUresult)cuIpcOpenEventHandle(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuIpcGetMemHandle___(void * jarg1, void * jarg2) {
  int jresult ;
  CUipcMemHandle *arg1 = (CUipcMemHandle *) 0 ;
  CUdeviceptr arg2 ;
  CUresult result;
  
  arg1 = (CUipcMemHandle *)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  result = (CUresult)cuIpcGetMemHandle(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuIpcOpenMemHandle___(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  CUdeviceptr *arg1 = (CUdeviceptr *) 0 ;
  CUipcMemHandle arg2 ;
  unsigned int arg3 ;
  CUipcMemHandle *argp2 ;
  CUresult result;
  
  arg1 = (CUdeviceptr *)jarg1; 
  argp2 = (CUipcMemHandle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CUipcMemHandle", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  result = (CUresult)cuIpcOpenMemHandle(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuIpcCloseMemHandle___(void * jarg1) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  result = (CUresult)cuIpcCloseMemHandle(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemHostRegister_v2___(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (CUresult)cuMemHostRegister_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemHostUnregister___(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  result = (CUresult)cuMemHostUnregister(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpy___(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUdeviceptr arg2 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemcpy(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyPeer___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned long jarg5) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUcontext arg2 = (CUcontext) 0 ;
  CUdeviceptr arg3 ;
  CUcontext arg4 = (CUcontext) 0 ;
  size_t arg5 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (CUcontext)jarg2; 
  arg3 = (CUdeviceptr)jarg3; 
  arg4 = (CUcontext)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (CUresult)cuMemcpyPeer(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyHtoD_v2___(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  CUdeviceptr arg1 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemcpyHtoD_v2(arg1,(void const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyDtoH_v2___(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUdeviceptr arg2 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemcpyDtoH_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyDtoD_v2___(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUdeviceptr arg2 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemcpyDtoD_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyDtoA_v2___(void * jarg1, unsigned long jarg2, void * jarg3, unsigned long jarg4) {
  int jresult ;
  CUarray arg1 = (CUarray) 0 ;
  size_t arg2 ;
  CUdeviceptr arg3 ;
  size_t arg4 ;
  CUresult result;
  
  arg1 = (CUarray)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (CUdeviceptr)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (CUresult)cuMemcpyDtoA_v2(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyAtoD_v2___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUarray arg2 = (CUarray) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (CUarray)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (CUresult)cuMemcpyAtoD_v2(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyAtoH_v2___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUarray arg2 = (CUarray) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (CUarray)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (CUresult)cuMemcpyAtoH_v2(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyAtoA_v2___(void * jarg1, unsigned long jarg2, void * jarg3, unsigned long jarg4, unsigned long jarg5) {
  int jresult ;
  CUarray arg1 = (CUarray) 0 ;
  size_t arg2 ;
  CUarray arg3 = (CUarray) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  CUresult result;
  
  arg1 = (CUarray)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (CUarray)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (CUresult)cuMemcpyAtoA_v2(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyAsync___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUdeviceptr arg2 ;
  size_t arg3 ;
  CUstream arg4 = (CUstream) 0 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (CUstream)jarg4; 
  result = (CUresult)cuMemcpyAsync(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyDtoHAsync_v2___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUdeviceptr arg2 ;
  size_t arg3 ;
  CUstream arg4 = (CUstream) 0 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (CUstream)jarg4; 
  result = (CUresult)cuMemcpyDtoHAsync_v2(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyDtoDAsync_v2___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4) {
  int jresult ;
  CUdeviceptr arg1 ;
  CUdeviceptr arg2 ;
  size_t arg3 ;
  CUstream arg4 = (CUstream) 0 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (CUdeviceptr)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (CUstream)jarg4; 
  result = (CUresult)cuMemcpyDtoDAsync_v2(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemcpyAtoHAsync_v2___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, void * jarg5) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUarray arg2 = (CUarray) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  CUstream arg5 = (CUstream) 0 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (CUarray)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (CUstream)jarg5; 
  result = (CUresult)cuMemcpyAtoHAsync_v2(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemsetD8_v2___(void * jarg1, unsigned char jarg2, unsigned long jarg3) {
  int jresult ;
  CUdeviceptr arg1 ;
  unsigned char arg2 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemsetD8_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemsetD16_v2___(void * jarg1, unsigned short jarg2, unsigned long jarg3) {
  int jresult ;
  CUdeviceptr arg1 ;
  unsigned short arg2 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemsetD16_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemsetD32_v2___(void * jarg1, unsigned int jarg2, unsigned long jarg3) {
  int jresult ;
  CUdeviceptr arg1 ;
  unsigned int arg2 ;
  size_t arg3 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (CUresult)cuMemsetD32_v2(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemsetD2D8_v2___(void * jarg1, unsigned long jarg2, unsigned char jarg3, unsigned long jarg4, unsigned long jarg5) {
  int jresult ;
  CUdeviceptr arg1 ;
  size_t arg2 ;
  unsigned char arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (CUresult)cuMemsetD2D8_v2(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemsetD2D16_v2___(void * jarg1, unsigned long jarg2, unsigned short jarg3, unsigned long jarg4, unsigned long jarg5) {
  int jresult ;
  CUdeviceptr arg1 ;
  size_t arg2 ;
  unsigned short arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned short)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (CUresult)cuMemsetD2D16_v2(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemsetD2D32_v2___(void * jarg1, unsigned long jarg2, unsigned int jarg3, unsigned long jarg4, unsigned long jarg5) {
  int jresult ;
  CUdeviceptr arg1 ;
  size_t arg2 ;
  unsigned int arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (CUresult)cuMemsetD2D32_v2(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuPointerGetAttribute___(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUpointer_attribute arg2 ;
  CUdeviceptr arg3 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (CUpointer_attribute)jarg2; 
  arg3 = (CUdeviceptr)jarg3; 
  result = (CUresult)cuPointerGetAttribute(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemAdvise___(void * jarg1, unsigned long jarg2, int jarg3, int jarg4) {
  int jresult ;
  CUdeviceptr arg1 ;
  size_t arg2 ;
  CUmem_advise arg3 ;
  CUdevice arg4 ;
  CUresult result;
  
  arg1 = (CUdeviceptr)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (CUmem_advise)jarg3; 
  arg4 = (CUdevice)jarg4; 
  result = (CUresult)cuMemAdvise(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemRangeGetAttribute___(void * jarg1, unsigned long jarg2, int jarg3, void * jarg4, unsigned long jarg5) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  CUmem_range_attribute arg3 ;
  CUdeviceptr arg4 ;
  size_t arg5 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (CUmem_range_attribute)jarg3; 
  arg4 = (CUdeviceptr)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (CUresult)cuMemRangeGetAttribute(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuMemRangeGetAttributes___(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4, void * jarg5, unsigned long jarg6) {
  int jresult ;
  void **arg1 = (void **) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  CUmem_range_attribute *arg3 = (CUmem_range_attribute *) 0 ;
  size_t arg4 ;
  CUdeviceptr arg5 ;
  size_t arg6 ;
  CUresult result;
  
  arg1 = (void **)jarg1; 
  arg2 = (size_t *)jarg2; 
  arg3 = (CUmem_range_attribute *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (CUdeviceptr)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (CUresult)cuMemRangeGetAttributes(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuPointerSetAttribute___(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  CUpointer_attribute arg2 ;
  CUdeviceptr arg3 ;
  CUresult result;
  
  arg1 = (void *)jarg1; 
  arg2 = (CUpointer_attribute)jarg2; 
  arg3 = (CUdeviceptr)jarg3; 
  result = (CUresult)cuPointerSetAttribute((void const *)arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuPointerGetAttributes___(unsigned int jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  unsigned int arg1 ;
  CUpointer_attribute *arg2 = (CUpointer_attribute *) 0 ;
  void **arg3 = (void **) 0 ;
  CUdeviceptr arg4 ;
  CUresult result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (CUpointer_attribute *)jarg2; 
  arg3 = (void **)jarg3; 
  arg4 = (CUdeviceptr)jarg4; 
  result = (CUresult)cuPointerGetAttributes(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuEventCreate___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  CUevent *arg1 = (CUevent *) 0 ;
  unsigned int arg2 ;
  CUresult result;
  
  arg1 = (CUevent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CUresult)cuEventCreate(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuEventRecord___(void * jarg1, void * jarg2) {
  int jresult ;
  CUevent arg1 = (CUevent) 0 ;
  CUstream arg2 = (CUstream) 0 ;
  CUresult result;
  
  arg1 = (CUevent)jarg1; 
  arg2 = (CUstream)jarg2; 
  result = (CUresult)cuEventRecord(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuEventQuery___(void * jarg1) {
  int jresult ;
  CUevent arg1 = (CUevent) 0 ;
  CUresult result;
  
  arg1 = (CUevent)jarg1; 
  result = (CUresult)cuEventQuery(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuEventSynchronize___(void * jarg1) {
  int jresult ;
  CUevent arg1 = (CUevent) 0 ;
  CUresult result;
  
  arg1 = (CUevent)jarg1; 
  result = (CUresult)cuEventSynchronize(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuEventDestroy_v2___(void * jarg1) {
  int jresult ;
  CUevent arg1 = (CUevent) 0 ;
  CUresult result;
  
  arg1 = (CUevent)jarg1; 
  result = (CUresult)cuEventDestroy_v2(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuEventElapsedTime___(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  float *arg1 = (float *) 0 ;
  CUevent arg2 = (CUevent) 0 ;
  CUevent arg3 = (CUevent) 0 ;
  CUresult result;
  
  arg1 = (float *)jarg1; 
  arg2 = (CUevent)jarg2; 
  arg3 = (CUevent)jarg3; 
  result = (CUresult)cuEventElapsedTime(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuFuncGetAttribute___(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUfunction_attribute arg2 ;
  CUfunction arg3 = (CUfunction) 0 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (CUfunction_attribute)jarg2; 
  arg3 = (CUfunction)jarg3; 
  result = (CUresult)cuFuncGetAttribute(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuFuncSetCacheConfig___(void * jarg1, int jarg2) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  CUfunc_cache arg2 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (CUfunc_cache)jarg2; 
  result = (CUresult)cuFuncSetCacheConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuFuncSetSharedMemConfig___(void * jarg1, int jarg2) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  CUsharedconfig arg2 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (CUsharedconfig)jarg2; 
  result = (CUresult)cuFuncSetSharedMemConfig(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuLaunchKernel___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, void * jarg9, void * jarg10, void * jarg11) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  CUstream arg9 = (CUstream) 0 ;
  void **arg10 = (void **) 0 ;
  void **arg11 = (void **) 0 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (CUstream)jarg9; 
  arg10 = (void **)jarg10; 
  arg11 = (void **)jarg11; 
  result = (CUresult)cuLaunchKernel(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuFuncSetBlockShape___(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (CUresult)cuFuncSetBlockShape(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuFuncSetSharedSize___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  unsigned int arg2 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CUresult)cuFuncSetSharedSize(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuParamSetSize___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  unsigned int arg2 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CUresult)cuParamSetSize(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuParamSeti___(void * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (CUresult)cuParamSeti(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuParamSetf___(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  int arg2 ;
  float arg3 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (CUresult)cuParamSetf(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuParamSetv___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (CUresult)cuParamSetv(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuLaunch___(void * jarg1) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  result = (CUresult)cuLaunch(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuLaunchGrid___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  int arg2 ;
  int arg3 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (CUresult)cuLaunchGrid(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuLaunchGridAsync___(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  int jresult ;
  CUfunction arg1 = (CUfunction) 0 ;
  int arg2 ;
  int arg3 ;
  CUstream arg4 = (CUstream) 0 ;
  CUresult result;
  
  arg1 = (CUfunction)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (CUstream)jarg4; 
  result = (CUresult)cuLaunchGridAsync(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuOccupancyMaxActiveBlocksPerMultiprocessor___(void * jarg1, void * jarg2, int jarg3, unsigned long jarg4) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUfunction arg2 = (CUfunction) 0 ;
  int arg3 ;
  size_t arg4 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (CUfunction)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (CUresult)cuOccupancyMaxActiveBlocksPerMultiprocessor(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags___(void * jarg1, void * jarg2, int jarg3, unsigned long jarg4, unsigned int jarg5) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUfunction arg2 = (CUfunction) 0 ;
  int arg3 ;
  size_t arg4 ;
  unsigned int arg5 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (CUfunction)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (CUresult)cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(arg1,arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuTexObjectDestroy___(unsigned long long jarg1) {
  int jresult ;
  CUtexObject arg1 ;
  CUresult result;
  
  arg1 = (CUtexObject)jarg1; 
  result = (CUresult)cuTexObjectDestroy(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuSurfObjectDestroy___(unsigned long long jarg1) {
  int jresult ;
  CUsurfObject arg1 ;
  CUresult result;
  
  arg1 = (CUsurfObject)jarg1; 
  result = (CUresult)cuSurfObjectDestroy(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceCanAccessPeer___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUdevice arg2 ;
  CUdevice arg3 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (CUdevice)jarg2; 
  arg3 = (CUdevice)jarg3; 
  result = (CUresult)cuDeviceCanAccessPeer(arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuDeviceGetP2PAttribute___(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  CUdevice_P2PAttribute arg2 ;
  CUdevice arg3 ;
  CUdevice arg4 ;
  CUresult result;
  
  arg1 = (int *)jarg1; 
  arg2 = (CUdevice_P2PAttribute)jarg2; 
  arg3 = (CUdevice)jarg3; 
  arg4 = (CUdevice)jarg4; 
  result = (CUresult)cuDeviceGetP2PAttribute(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxEnablePeerAccess___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  unsigned int arg2 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CUresult)cuCtxEnablePeerAccess(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuCtxDisablePeerAccess___(void * jarg1) {
  int jresult ;
  CUcontext arg1 = (CUcontext) 0 ;
  CUresult result;
  
  arg1 = (CUcontext)jarg1; 
  result = (CUresult)cuCtxDisablePeerAccess(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfCuda_cuGetExportTable___(void * jarg1, void * jarg2) {
  int jresult ;
  void **arg1 = (void **) 0 ;
  CUuuid *arg2 = (CUuuid *) 0 ;
  CUresult result;
  
  arg1 = (void **)jarg1; 
  arg2 = (CUuuid *)jarg2; 
  result = (CUresult)cuGetExportTable((void const **)arg1,(CUuuid_st const *)arg2);
  jresult = (int)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

